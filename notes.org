#+BEGIN_SRC sql
  create table .lines( id INT NOT NULL AUTO_INCREMENT,
                       date DATETIME NOT NULL,
                       type VARCHAR(32) NOT NULL,
                       text TEXT CHARACTER SET utf8,
                       name VARCHAR(64) CHARACTER SET utf8,
                       PRIMARY KEY ( id ) );
#+END_SRC

#+BEGIN_SRC sql
  LOAD DATA LOCAL INFILE
       '/data/lampilelo/Programming/LogParse/builddir/temp_file.csv'
       INTO TABLE scratch.lines2
       FIELDS TERMINATED BY ',' ENCLOSED BY '\''
       LINES TERMINATED BY '\n' (date, type, text, name);
#+END_SRC

[[https://archive.fosdem.org/2018/schedule/event/web_development_in_c/attachments/slides/2443/export/events/attachments/web_development_in_c/slides/2443/Roel_Standaert___Introduction_to_Wt_4___FOSDEM2018.pdf][Wt with bootstrap]]

* Threading in LineParser::ParseFile
Since year heuristic should be very quick, we could delegate ParseLine to multiple threads that would add parsed lines to a std::unordered_map with key being line number. Another running thread would check sequentially the map and check if the year changed, and then modify it in every line after that and call a writer asynchronously (that would require the writer to be thread-safe) or synchronously.

Map-parsing thread could block other threads from writing to a map so if it would be slower than parsing threads, we wouldn't have a big backlog of lines on the stack. Maybe this blocking behavior should be a switchable option or determined in the runtime? Maybe we could block parsing threads if the map contains more items than some constant value?

Map-parsing thread would wait() if there were no lines in the map. Line-parsing threads would notify it with std::condition_variable that it has work to do.
If the line number it waits for is not in the map, it would wait() longer.
I *MUST* ensure that lines are counted correctly. *AND WRITE A DOC*


Names set could be thread_local and merged with the rest. Also it could be unordered_set for faster lookup and save, as it doesn't need to be sorted.

Name parsing could be done asynchronously in the main thread.

Undefined lines should be passed to a map-parsing thread so the year would be added and only then put aside.

* Performance
Some lines parse for very long time which results in overcrowding the map.
More threads = more overcrowding. With 8 threads, 184090-line file, no LineWriter and ~-O2~ compiler setting, map length was at most ~4000 but on average it stays around ~1500.

Depending on how long LineWriter::WriteLine() executes, the map will be longer and longer.
If it's slower than LineWriter::ParseLine() - multiple threads won't be of any help and only the burden that enlarges memory consumption.

- LineWriterDatabase (184090-line file):
    a) When using LineWriterDatabase and only 1 thread, operation takes 10s and max map length is ~2k.
    b) When using LineWriterDatabase and 2 threads, operation takes 5s and max map length is ~15k.
  More threads hardly improve anything.

** Speculation
It seems like the bottleneck won't be parsing lines, but writing with a LineWriter. It's sequential so multithreading won't help anything if LineWriter won't be made asynchronous.

LineWriterDatabase probably can be improved by multithreading in MySQL library.

I need to think about the cases for LineWriters when they can be made asynchronous (I guess, aside from writing to a database it's no use, but I think we want to write to the database only(?)).

* To Do
** DONE Year heuristic :ARCHIVE:
CLOSED: [2018-09-26 śro 16:45]
Logs have only month and day in the date. I need to add a year so if we sort by date, the lines from different years won't be jumbled up.
** IN-PROGRESS Concurrency
*** DONE Create LineParser::ParseNextLine() to use as a thread
CLOSED: [2018-09-28 pią 17:41]
*** DONE Rename ParseNextLine() to ParseLinesAsynchronously() and add the thread loop.
CLOSED: [2018-10-06 sob 18:57]
*** DONE Resolve segmentation fault problem
CLOSED: [2018-10-06 sob 20:31]
[[file:LineParser.cpp::for%20(auto&%20message_type%20:%20message_types)%20{][message_types]] vector is not accessed atomically and it causes segmentation fault

Loop iterating over message_types was using references and changing it to copying every MessageType solved the problem. I need to check how much overhead it caused and resolve it definitely.

I think that every thread should have its own MessageType vector. Won't take much space and will resolve the problem.
*** WAITING Move code for reading lines from a file to the main thread
It will create std::asyncs with std::condition_variable, and after reading a line from the file it wil notify_one() to process it.
std::readline() would read a line into the queue from which threads would read and process it.

Reading a file either way (inside or outside of a thread) is blocking.
*** IN-PROGRESS Create a worker thread function for more processing on a map of lines
First, I need a way to check whether threads are running or not so we can know when to stop map-processing.

- [X] Year heuristics
- [X] Pushing undefined lines to a set for emote heuristics
- [ ] Saving lines with a LineWriter (add a mutex)
** TODO Save all Undefined lines with a writer and then load it again and parse for emote
Then revise comment on [[file:LineParser.h::static%20bool%20ParseFile(const%20std::string&%20file_path,][LineParser::ParseFile()]] (specifically Warning)

*OR*
I should maybe write them to a temp file because of encapsulation rule.

_This is necessary because as far as the program is concerned, the file for parsing may be exclusively Undefined lines and 1 mln lines long._
** TODO Progress bar
** TODO Create some way to send messages to STDOUT and STDERR in a thread-safe way
Sometimes when several threads want to send something to std::cout/err it all gets jumbled up.

Check if replacing:
#+BEGIN_SRC c++
  std::cerr << e.what() << std::endl;
#+END_SRC
with:
#+BEGIN_SRC c++
  std::cerr << std::string(e.what()) + '\n';
#+END_SRC
would be enough.
